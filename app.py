import os
from dotenv import load_dotenv
import streamlit as st
from tavily import TavilyClient
import requests

# --- ENVIRONMENT VARIABLES ---
load_dotenv()
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not TAVILY_API_KEY:
    TAVILY_API_KEY = st.text_input("Enter your Tavily API key:", type="password")
if not GROQ_API_KEY:
    GROQ_API_KEY = st.text_input("Enter your Groq API key:", type="password")

# --- CUSTOM CSS for Futuristic UI ---
css = """
<style>
:root {
  --primary: #2b5876;
  --secondary: #4e4376;
  --accent: #f6d365;
  --accent2: #4e4376;
}
.main {
  background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
  color: white;
}
.stTextInput input, .stSelectbox select {
  background-color: rgba(255,255,255,0.2);
  color: white;
  border: 1px solid var(--secondary);
  border-radius: 10px;
  padding: 10px;
}
.stButton button {
  background: linear-gradient(90deg, var(--accent) 0%, var(--accent2) 100%);
  color: black;
  border: none;
  border-radius: 10px;
  font-weight: bold;
  padding: 10px 20px;
  margin: 5px 0;
}
.stMarkdown, .stCode, .stLink {
  color: white;
}
.link {
  color: var(--accent);
}
.card {
  background: rgba(255,255,255,0.1);
  border-radius: 10px;
  padding: 15px;
  margin: 10px 0;
}
</style>
"""
st.markdown(css, unsafe_allow_html=True)

# --- SIDEBAR ---
with st.sidebar:
    st.title("‚öôÔ∏è Settings")
    language = st.selectbox(
        "Programming Language",
        ["Python", "Java", "C++", "JavaScript", "Go", "Rust"]
    )
    show_explanation = st.checkbox("Show Explanation", value=True)

# --- MAIN UI ---
st.title("üöÄ CodeQ: AI Coding Assistant")
st.caption("Ask any coding question and get code, explanations, and reference links!")
st.markdown("""<div style="text-align: center; font-size: 0.7em; color: #ccc; margin-top: -1.5em; margin-bottom: 1em;">
Created by Prudhvi
</div>""", unsafe_allow_html=True)

question = st.text_input("Enter your coding question:", placeholder="How to reverse a string in Python?")

if question and TAVILY_API_KEY and GROQ_API_KEY:
    # --- TAVILY SEARCH ---
    tavily_client = TavilyClient(api_key=TAVILY_API_KEY)
    response = tavily_client.search(question)
    links = [result["url"] for result in response.get("results", [])[:5]]

    # --- GROQ LLM (MOCK for demo, replace with real API call) ---
    prompt = f"Generate a {language} code snippet for: {question}. Also provide a brief explanation."
    # Uncomment and use when Groq API is available
    # groq_url = "https://api.groq.com/openai/v1/chat/completions"
    # headers = {"Authorization": f"Bearer {GROQ_API_KEY}"}
    # data = {
    #     "model": "llama3-70b-8192",
    #     "messages": [{"role": "user", "content": prompt}]
    # }
    # response = requests.post(groq_url, headers=headers, json=data)
    # result = response.json()
    # code_snippet = result["choices"][0]["message"]["content"]
    # explanation = "Explanation generated by Groq."

    # For demo, use mock response
    code_snippet = f"# {language} code for: {question}\nprint('Hello, World!')"
    explanation = "This code prints 'Hello, World!' to the console. Replace with your own logic."

    # --- DISPLAY RESULTS ---
    st.subheader("üîó Reference Links")
    for link in links:
        st.markdown(f"- <span class='link'>[{link}]({link})</span>", unsafe_allow_html=True)

    st.subheader(f"üíª Code Snippet ({language})")
    st.code(code_snippet, language=language.lower())

    if show_explanation:
        st.subheader("üìù Explanation")
        st.markdown(explanation)

    if st.button("üîÑ Regenerate"):
        st.rerun()
else:
    if not (TAVILY_API_KEY and GROQ_API_KEY):
        st.warning("Please enter your API keys to continue.")
    if not question:
        st.info("Enter a coding question to get started.")
